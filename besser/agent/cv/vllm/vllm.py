import logging
from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

import numpy as np

from besser.agent.core.image.image_property import ImageProperty
from besser.agent.cv.prediction.image_prediction import ImagePropertyPrediction

if TYPE_CHECKING:
    from besser.agent.cv.cv_engine import CVEngine


class VLLM(ABC):

    def __init__(self, cv_engine: 'CVEngine', name: str, parameters: dict):
        self._cv_engine: 'CVEngine' = cv_engine
        self.name: str = name
        self.parameters: dict = parameters
        self._cv_engine.vllms[name] = self
        # TODO: Global/user context like in LLM?

    def set_parameters(self, parameters: dict) -> None:
        """Set the VLLM parameters.

        Args:
            parameters (dict): the new VLLM parameters
        """
        self.parameters = parameters

    @abstractmethod
    def initialize(self) -> None:
        """Initialize the VLLM. This function is called during the agent training."""
        pass

    @abstractmethod
    def predict(self, message: str, img: np.ndarray, parameters: dict = None) -> str:
        """Make a prediction, i.e., generate an output.

        Args:
            message (Any): the VLLM input text
            img (np.ndarray): the VLLM input image
            parameters (dict): the VLLM parameters to use in the prediction. If none is provided, the default VLLM
                parameters will be used

        Returns:
            str: the LLM output
        """
        pass

    def predict_image_properties(self, img: np.ndarray, parameters: dict = None) -> list[ImagePropertyPrediction]:
        """Run image property prediction.

        Args:
            message (Any): the VLLM input text
            img (np.ndarray): the VLLM input image
            parameters (dict): the VLLM parameters to use in the prediction. If none is provided, the default VLLM
                parameters will be used

        Returns:
            list[ImagePropertyPrediction]: the image property predictions
        """
        logging.warning(f'predict_image_properties not implemented in {self.__class__.__name__}')
        return []

    def default_json_to_image_property_predictions(self, response_json: dict) -> list[ImagePropertyPrediction]:
        """Parse the JSON generated by an VLLM to the list of image property prediction objects.

        The expected JSON structure is the following:

        .. code-block::

            {
                'property_name_1': 0.6,
                'property_name_2': 0.9
                {...}
            }

        Args:
            message (str): the original user message sent to the agent
            response_json (dict): the LLM generated JSON response containing the intent predictions

        Returns:
            list[IntentClassifierPrediction]: the list of intent classifier predictions
        """
        image_property_predictions: list[ImagePropertyPrediction] = []
        for property_name, score in response_json.items():
            image_property: ImageProperty or None = self._cv_engine._agent.get_image_property(property_name)
            if image_property is not None:
                score = min(max(score, 0), 1)  # Force to be between 0 and 1
                image_property_predictions.append(ImagePropertyPrediction(image_property=image_property, score=score))
        return image_property_predictions
